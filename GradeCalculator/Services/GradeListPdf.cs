using GradeCalculator.Enums;
using GradeCalculator.Interfaces;
using GradeCalculator.Structs;
using MigraDoc.DocumentObjectModel;
using MigraDoc.DocumentObjectModel.Tables;
using MigraDoc.Rendering;
using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace GradeCalculator
{
    class GradeListPdf : IGradeListPdf
    {
        /// <summary>Pdf file name.</summary>
        readonly string fileNameShoo = "GradeList.pdf";
        /// <summary>Pdf file title.</summary>
        readonly string fileTitleShoo = "Grade list - Generated by Grading Calculator";
        /// <summary>Pdf file subject.</summary>
        readonly string fileSubjectShoo = "A list containing the minimum points to get a grade";
        /// <summary>Pdf file author.</summary>
        readonly string fileAuthorShoo = "Grading Calculator";

        public void CreateShoo(List<GradeListItem> gradeListShoo, float maxPointsShoo, float ceasuraShoo, GradingMethodEnum gradingMethodShoo)
        {
            // Create pdf
            Document pdfDocumentShoo = CreatePdfShoo();

            // Add section to document (page)
            Section sectionShoo = pdfDocumentShoo.AddSection();

            // Add header
            AddHeaderShoo(sectionShoo, fileTitleShoo);

            // Add grading method
            AddGradingMethodShoo(sectionShoo, maxPointsShoo, ceasuraShoo, gradingMethodShoo);

            // Add grade list table
            AddGradeListTableShoo(sectionShoo, gradeListShoo);

            // Display pdf
            DisplayPdfShoo(pdfDocumentShoo);
        }

        /// <summary>
        /// Create Pdf Shoo.
        /// Creates and returns new pdf document.
        /// </summary>
        /// <returns>Pdf document</returns>
        private Document CreatePdfShoo()
        {
            // Return pdf document with info
            return new Document
            {
                Info =
                {
                    Title = fileTitleShoo,
                    Subject = fileSubjectShoo,
                    Author = fileAuthorShoo
                }
            };
        }

        /// <summary>
        /// Add Header Shoo.
        /// Adds a header to section.
        /// </summary>
        /// <param name="sectionShoo">Section to add header to</param>
        /// <param name="headerTextShoo">Text to use for header</param>
        private void AddHeaderShoo(Section sectionShoo, string headerTextShoo)
        {
            Paragraph headerParagraphShoo = sectionShoo.Headers.Primary.AddParagraph(headerTextShoo);
            headerParagraphShoo.Format.Alignment = ParagraphAlignment.Center;
            headerParagraphShoo.Format.Font.Bold = true;
            headerParagraphShoo.Format.Font.Size = 16;
        }

        /// <summary>
        /// Add Grading Method Shoo.
        /// Adds grading method data to section.
        /// </summary>
        /// <param name="sectionShoo">Section to add grading method data to</param>
        /// <param name="maxPointsShoo">Maximum points used for grading</param>
        /// <param name="ceasuraShoo">Ceasura used for grading</param>
        /// <param name="gradingMethodShoo">Grading method used for grading</param>
        private void AddGradingMethodShoo(Section sectionShoo, float maxPointsShoo, float ceasuraShoo, GradingMethodEnum gradingMethodShoo)
        {
            // Add grading method info to section
            sectionShoo.AddParagraph(
                "Max. points: " + maxPointsShoo + "                            " +
                "Ceasura: " + ceasuraShoo + "                            " +
                "Grading method: " + gradingMethodShoo);

            // Add empty line
            sectionShoo.AddParagraph();
        }

        /// <summary>
        /// Add Grade List Table Shoo.
        /// Adds grade list table to section.
        /// </summary>
        /// <param name="sectionShoo">Section to add table to</param>
        /// <param name="gradeListShoo">Grade list to fill table with</param>
        private void AddGradeListTableShoo(Section sectionShoo, List<GradeListItem> gradeListShoo)
        {
            // Add table containing the grade list
            Table tableShoo = sectionShoo.AddTable();
            tableShoo.Style = "Table";
            tableShoo.Borders.Color = Color.FromRgb(0, 0, 0);
            tableShoo.Borders.Width = 0.25;

            // Add table columns
            AddGradeListTableColumnsShoo(tableShoo);

            // Add table header
            AddGradeListTableHeaderShoo(tableShoo);

            // Fill grade list table
            FillGradeListTableShoo(tableShoo, gradeListShoo);
        }

        /// <summary>
        /// Add Grade List Table Columns Shoo.
        /// Adds columns to grade list table.
        /// </summary>
        /// <param name="tableShoo">Table to add columns to</param>
        private void AddGradeListTableColumnsShoo(Table tableShoo)
        {
            // Visible columns
            tableShoo.AddColumn();
            tableShoo.AddColumn();

            // Inivible column
            Column columnShoo = tableShoo.AddColumn("2cm");
            columnShoo.Borders.Visible = false;

            // Visible columns
            tableShoo.AddColumn();
            tableShoo.AddColumn();
        }

        /// <summary>
        /// Add Grade List Table Headers Shoo.
        /// Adds table headers to table.
        /// </summary>
        /// <param name="tableShoo">Table to add columns to</param>
        private void AddGradeListTableHeaderShoo(Table tableShoo)
        {
            // Add header row
            Row rowShoo = tableShoo.AddRow();
            rowShoo.HeadingFormat = true;
            rowShoo.Format.Alignment = ParagraphAlignment.Center;
            rowShoo.Format.Font.Bold = true;

            // Set header titles
            rowShoo[0].AddParagraph("Points");
            rowShoo[1].AddParagraph("Grade");
            rowShoo[3].AddParagraph("Points");
            rowShoo[4].AddParagraph("Grade");
        }

        /// <summary>
        /// Fill Grade List Table Shoo.
        /// Fills grade list table with grades and points.
        /// </summary>
        /// <param name="tableShoo">Table to add grades to</param>
        /// <param name="gradeListShoo">Grade list to add to table</param>
        private void FillGradeListTableShoo(Table tableShoo, List<GradeListItem> gradeListShoo)
        {
            // We loop through items in list / 2, since we add 2 items each loop
            int loopCountShoo = (int)Math.Ceiling(gradeListShoo.Count / 2F);

            // Add grade list items to table
            for (int indexShoo = 0; indexShoo < loopCountShoo; indexShoo++)
            {
                // Add new row
                Row rowShoo = tableShoo.AddRow();

                // Add left item to table
                GradeListItem gradeListItemLeftShoo = gradeListShoo[indexShoo];
                rowShoo[0].AddParagraph(gradeListItemLeftShoo.Points);
                rowShoo[1].AddParagraph(gradeListItemLeftShoo.Grade);

                // Calculate right item index
                int rightItemIndex = indexShoo + loopCountShoo;

                // Check if index out of range, end of list
                if (rightItemIndex >= gradeListShoo.Count)
                {
                    rowShoo[3].Borders.Visible = false;
                    rowShoo[4].Borders.Visible = false;
                    break;
                }

                // Add right item to table
                GradeListItem gradeListItemRightShoo = gradeListShoo[rightItemIndex];
                rowShoo[3].AddParagraph(gradeListItemRightShoo.Points);
                rowShoo[4].AddParagraph(gradeListItemRightShoo.Grade);
            }
        }

        /// <summary>
        /// Display pdf Shoo.
        /// Renders pdf document, saves it and displays it via system default pdf-viewer.
        /// </summary>
        /// <param name="pdfDocumentShoo">The pdf document to display</param>
        private void DisplayPdfShoo(Document pdfDocumentShoo)
        {
            // Create pdf renderer
            PdfDocumentRenderer pdfRendererShoo = new PdfDocumentRenderer(false)
            {
                Document = pdfDocumentShoo
            };

            // Render document
            pdfRendererShoo.RenderDocument();

            // Save document
            pdfRendererShoo.PdfDocument.Save(fileNameShoo);

            // Open document
            Process.Start(fileNameShoo);
        }
    }
}
